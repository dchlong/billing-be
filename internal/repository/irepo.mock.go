// Code generated by MockGen. DO NOT EDIT.
// Source: irepo.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	models "github.com/dchlong/billing-be/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockIRepo is a mock of IRepo interface.
type MockIRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIRepoMockRecorder
}

// MockIRepoMockRecorder is the mock recorder for MockIRepo.
type MockIRepoMockRecorder struct {
	mock *MockIRepo
}

// NewMockIRepo creates a new mock instance.
func NewMockIRepo(ctrl *gomock.Controller) *MockIRepo {
	mock := &MockIRepo{ctrl: ctrl}
	mock.recorder = &MockIRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepo) EXPECT() *MockIRepoMockRecorder {
	return m.recorder
}

// Bill mocks base method.
func (m *MockIRepo) Bill() IBillRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bill")
	ret0, _ := ret[0].(IBillRepo)
	return ret0
}

// Bill indicates an expected call of Bill.
func (mr *MockIRepoMockRecorder) Bill() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bill", reflect.TypeOf((*MockIRepo)(nil).Bill))
}

// MockIBillRepo is a mock of IBillRepo interface.
type MockIBillRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIBillRepoMockRecorder
}

// MockIBillRepoMockRecorder is the mock recorder for MockIBillRepo.
type MockIBillRepoMockRecorder struct {
	mock *MockIBillRepo
}

// NewMockIBillRepo creates a new mock instance.
func NewMockIBillRepo(ctrl *gomock.Controller) *MockIBillRepo {
	mock := &MockIBillRepo{ctrl: ctrl}
	mock.recorder = &MockIBillRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBillRepo) EXPECT() *MockIBillRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIBillRepo) Create(ctx context.Context, records ...*models.CallHistory) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range records {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIBillRepoMockRecorder) Create(ctx interface{}, records ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, records...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIBillRepo)(nil).Create), varargs...)
}

// FindBy mocks base method.
func (m *MockIBillRepo) FindBy(ctx context.Context, filter *models.CallHistoryFilter) ([]*models.CallHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBy", ctx, filter)
	ret0, _ := ret[0].([]*models.CallHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBy indicates an expected call of FindBy.
func (mr *MockIBillRepoMockRecorder) FindBy(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBy", reflect.TypeOf((*MockIBillRepo)(nil).FindBy), ctx, filter)
}

// FindByID mocks base method.
func (m *MockIBillRepo) FindByID(ctx context.Context, id int64) (*models.CallHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*models.CallHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockIBillRepoMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockIBillRepo)(nil).FindByID), ctx, id)
}
